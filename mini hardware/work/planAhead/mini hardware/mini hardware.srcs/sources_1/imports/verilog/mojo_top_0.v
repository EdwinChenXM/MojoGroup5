/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    input [4:0] io_button,
    output reg [3:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    output reg a,
    output reg b,
    output reg ci,
    input press,
    input avr_rx_busy
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_myBlinker_blink;
  blinker_2 myBlinker (
    .clk(clk),
    .rst(rst),
    .blink(M_myBlinker_blink)
  );
  
  reg [28:0] M_counter_d, M_counter_q = 1'h0;
  
  
  localparam START_getstate = 3'd0;
  localparam STATE1_getstate = 3'd1;
  localparam STATE2_getstate = 3'd2;
  localparam STATE3_getstate = 3'd3;
  localparam STATE4_getstate = 3'd4;
  localparam STATE5_getstate = 3'd5;
  localparam STATE6_getstate = 3'd6;
  localparam STATE7_getstate = 3'd7;
  
  reg [2:0] M_getstate_d, M_getstate_q = START_getstate;
  
  integer s;
  
  integer c;
  
  always @* begin
    M_getstate_d = M_getstate_q;
    M_counter_d = M_counter_q;
    
    a = 1'h0;
    b = 1'h0;
    ci = 1'h0;
    if (M_counter_q[28+0-:1] == 1'h0) begin
      if (M_counter_q[27+0-:1] == 1'h0) begin
        if (M_counter_q[26+0-:1] == 1'h0) begin
          M_getstate_d = START_getstate;
        end else begin
          M_getstate_d = STATE1_getstate;
        end
      end else begin
        if (M_counter_q[26+0-:1] == 1'h0) begin
          M_getstate_d = STATE2_getstate;
        end else begin
          M_getstate_d = STATE3_getstate;
        end
      end
    end else begin
      if (M_counter_q[27+0-:1] == 1'h0) begin
        if (M_counter_q[26+0-:1] == 1'h0) begin
          M_getstate_d = STATE4_getstate;
        end else begin
          M_getstate_d = STATE5_getstate;
        end
      end else begin
        if (M_counter_q[26+0-:1] == 1'h0) begin
          M_getstate_d = STATE6_getstate;
        end else begin
          M_getstate_d = STATE7_getstate;
        end
      end
    end
    M_counter_d = M_counter_q + 1'h1;
    
    case (M_getstate_q)
      START_getstate: begin
        led[1+0-:1] = 1'h0;
        led[2+0-:1] = 1'h0;
        led[3+0-:1] = 1'h0;
        a = 1'h0;
        b = 1'h0;
        ci = 1'h0;
      end
      STATE1_getstate: begin
        led[1+0-:1] = 1'h0;
        led[2+0-:1] = 1'h0;
        led[3+0-:1] = 1'h1;
        a = 1'h0;
        b = 1'h0;
        ci = 1'h1;
      end
      STATE2_getstate: begin
        led[1+0-:1] = 1'h0;
        led[2+0-:1] = 1'h1;
        led[3+0-:1] = 1'h0;
        a = 1'h0;
        b = 1'h1;
        ci = 1'h0;
      end
      STATE3_getstate: begin
        led[1+0-:1] = 1'h0;
        led[2+0-:1] = 1'h1;
        led[3+0-:1] = 1'h1;
        a = 1'h0;
        b = 1'h1;
        ci = 1'h1;
      end
      STATE4_getstate: begin
        led[1+0-:1] = 1'h1;
        led[2+0-:1] = 1'h0;
        led[3+0-:1] = 1'h0;
        a = 1'h1;
        b = 1'h0;
        ci = 1'h0;
      end
      STATE5_getstate: begin
        led[1+0-:1] = 1'h1;
        led[2+0-:1] = 1'h0;
        led[3+0-:1] = 1'h1;
        a = 1'h1;
        b = 1'h0;
        ci = 1'h1;
      end
      STATE6_getstate: begin
        led[1+0-:1] = 1'h1;
        led[2+0-:1] = 1'h1;
        led[3+0-:1] = 1'h0;
        a = 1'h1;
        b = 1'h1;
        ci = 1'h0;
      end
      STATE7_getstate: begin
        led[1+0-:1] = 1'h1;
        led[2+0-:1] = 1'h1;
        led[3+0-:1] = 1'h1;
        a = 1'h1;
        b = 1'h1;
        ci = 1'h1;
      end
    endcase
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    spi_miso = 1'bz;
    led[0+0-:1] = M_myBlinker_blink;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_getstate_q <= 1'h0;
    end else begin
      M_getstate_q <= M_getstate_d;
    end
  end
  
endmodule
